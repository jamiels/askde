# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
# ~~~~~
# Play uses HOCON as its configuration file format.  HOCON has a number
# of advantages over other config formats, but there are two things that
# can be used when modifying settings.
#
# You can include other configuration files in this main application.conf file:
#include "extra-config.conf"
#
# You can declare variables and substitute for them:
#mykey = ${some.value}
#
# And if an environment variable exists when there is no other subsitution, then
# HOCON will fall back to substituting environment variable:
#mykey = ${JAVA_HOME}


akka {
  # "akka.log-config-on-start" is extraordinarly useful because it log the complete
  # configuration at INFO level, including defaults and overrides, so it s worth
  # putting at the very top.
  #
  # Put the following in your conf/logback.xml file:
  #
  # <logger name="akka.actor" level="INFO" />
  #
  # And then uncomment this line to debug the configuration.
  #
  #log-config-on-start = true
}

play.http.secret.key = "5354353"
play.modules {
   enabled = ${play.modules.enabled} [Module,be.objectify.deadbolt.java.DeadboltModule,raven.security.DeadboltHookModule]
  #disabled += ""
}

#play.editor="http://localhost:63342/api/file/?file=%s&line=%s"

play.i18n {
  # The application languages
  langs = [ "en" ]

  # Whether the language cookie should be secure or not
  #langCookieSecure = true

  # Whether the HTTP only attribute of the cookie should be set to true
  #langCookieHttpOnly = true
}

## Play HTTP settings
# ~~~~~
play.http {

  #router = my.application.Router

  ## Action Creator
  # https://www.playframework.com/documentation/latest/JavaActionCreator
  # ~~~~~
  #actionCreator = null

  ## ErrorHandler
  # https://www.playframework.com/documentation/latest/JavaRouting
  # https://www.playframework.com/documentation/latest/ScalaRouting
  # ~~~~~
  # If null, will attempt to load a class called ErrorHandler in the root package,
  #errorHandler = null


  filters = raven.filters.CSRFFilter

  ## Session & Flash
  # https://www.playframework.com/documentation/latest/JavaSessionFlash
  # https://www.playframework.com/documentation/latest/ScalaSessionFlash
  # ~~~~~
  session {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    # httpOnly = true

    # Sets the max-age field of the cookie to 5 minutes.
    # NOTE: this only sets when the browser will discard the cookie. Play will consider any
    # cookie value with a valid signature to be a valid session forever. To implement a server side session timeout,
    # you need to put a timestamp in the session and check it at regular intervals to possibly expire it.
    #maxAge = 300

    # Sets the domain on the session cookie.
    #domain = "example.com"
  }

  flash {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    # httpOnly = true
  }
}

## Netty Provider
# https://www.playframework.com/documentation/latest/SettingsNetty
# ~~~~~
play.server.netty {
  # Whether the Netty wire should be logged
  #log.wire = true

  # If you run Play on Linux, you can use Netty's native socket transport
  # for higher performance with less garbage.
  transport = "native"
}


play.ws {
  # Sets HTTP requests not to follow 302 requests
  #followRedirects = false

  # Sets the maximum number of open HTTP connections for the client.
  #ahc.maxConnectionsTotal = 50

  ## WS SSL
  # https://www.playframework.com/documentation/latest/WsSSL
  # ~~~~~
  ssl {
    # Configuring HTTPS with Play WS does not require programming.  You can
    # set up both trustManager and keyManager for mutual authentication, and
    # turn on JSSE debugging in development with a reload.
    #debug.handshake = true
    #trustManager = {
    #  stores = [
    #    { type = "JKS", path = "exampletrust.jks" }
    #  ]
    #}
  }
}

play.cache {
  # If you want to bind several caches, you can bind the individually
  #bindCaches = ["db-cache", "user-cache", "session-cache"]
}

play.filters {
  cors {
    # Filter paths by a whitelist of path prefixes
    #pathPrefixes = ["/some/path", ...]
    
    # The allowed origins. If null, all origins are allowed.
    #allowedOrigins = ["http://www.example.com"]

    # The allowed HTTP methods. If null, all methods are allowed
    #allowedHttpMethods = ["GET", "POST"]
  }

  csrf {
    # Sets the cookie to be sent only over HTTPS
    #cookie.secure = true
	
    # Defaults to CSRFErrorHandler in the root package.
    errorHandler = raven.security.RavenCSRFErrorHandler
    token.sign=true
  }

  ## Security headers filter configuration
  # https://www.playframework.com/documentation/latest/SecurityHeaders
  # ~~~~~
  # Defines security headers that prevent XSS attacks.
  # If enabled, then all options are set to the below configuration by default:
  headers {
    # The X-Frame-Options header. If null, the header is not set.
    #frameOptions = "DENY"

    # The X-XSS-Protection header. If null, the header is not set.
    #xssProtection = "1; mode=block"

    # The X-Content-Type-Options header. If null, the header is not set.
    #contentTypeOptions = "nosniff"

    # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
    #permittedCrossDomainPolicies = "master-only"

    # The Content-Security-Policy header. If null, the header is not set.
    #contentSecurityPolicy = "default-src 'self'"
  }

  ## Allowed hosts filter configuration
  # https://www.playframework.com/documentation/latest/AllowedHostsFilter
  # ~~~~~
  # Play provides a filter that lets you configure which hosts can access your application.
  # This is useful to prevent cache poisoning attacks.
  hosts {
    # Allow requests to example.com, its subdomains, and localhost:9000.
    #allowed = [".example.com", "localhost:9000"]
  }
}

play.evolutions {
  # You can disable evolutions for a specific datasource if necessary
   db.default.enabled = true
   db.default.autoApply=true
}

play.db {
  # The combination of these two settings results in "db.default" as the
  # default JDBC pool:
  config = "db"
  default = "default"

  # Play uses HikariCP as the default connection pool.  You can override
  # settings by changing the prototype:
  prototype {
    # Sets a fixed JDBC connection pool size of 50
    #hikaricp.minimumIdle = 2
    #hikaricp.maximumPoolSize = 12
  }
}


ebean.default = ["models.askde.*","models.raven.*"]

db {

	default.driver="org.mariadb.jdbc.Driver"
	default.url="jdbc:mariadb://askde.cvd5ra24pqu7.us-east-1.rds.amazonaws.com:3306/askde"
	default.username="askde"
	default.password="vt_ke)~V4#{uZW3h"

  	#default.driver = org.h2.Driver
  	#default.url = "jdbc:h2:mem:askde;MODE=MYSQL;DB_CLOSE_DELAY=-1"
  	#default.username = sa
  	#default.password = ""
  	#default.readOnly=true

  	#default.logSql=true
}

raven {
	executor.size = 5
	app {
			name = "Ask Douglas Elliman"
			majorVersion = 1
			title = "Ask Douglas Elliman"
			errorPage = views.html.error
			domain = askde.com
			defaultURL = "/"
	}
	security {
			salt = de54321
			defaultRole = ""
	}
	imaging {
			bucket = askde
	}
	privacy {
			name = "BrokerageIQ.com"
			corpName = "Override Labs"
			privacyEmail = "privacy@brokerageiq.com"
			infringementEmail = "copyright-infringement@brokerageiq.com"
	}
	sendgrid {
			apiKey = "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"

	}
	signup {
			fromName = "BrokerageIQ"
			fromEmail = "hello@brokerageiq.com"
			verificationTemplate = "ca935fe9-b9f7-4648-9fad-ac95b4c994fb"
			verificationSubject = "Welcome to BrokerageIQ"
			replyTo = "hello@brokerageiq.com"
	}
	referral {
			referralTemplate = "ca935fe9-b9f7-4648-9fad-ac95b4c994fb"
	}
}

askde {
	listingsFeedURL = "http://feeds.longisland.elliman.com/zillow/douglaselliman.xml"
	messageIfListingsDown = "Ask Douglas Elliman is taking a lunch break. However, in meantime, take a look at elliman.com for our latest listings"
	messageIfIntentBlank = "Hi, I couldn't get what you said, please try again"
	feedAPIKey = df39e0ee-01f1-46b3-a0dd-4c639c6a7655
	openHouseMorningBoundary = "07:00:00"
	openHouseNightBoundary = "22:00:00"
}

deadbolt {
  java {
    cache-user=true
    view-timeout=5000
    blocking=true
    blocking-timeout=5000
  }
}
